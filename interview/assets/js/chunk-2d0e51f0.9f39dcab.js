(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e51f0"],{"92ab":function(s,a,r){"use strict";r.r(a);var t=function(){var s=this,a=s.$createElement;s._self._c;return s._m(0)},l=[function(){var s=this,a=s.$createElement,r=s._self._c||a;return r("section",[r("h1",[s._v("亨元模式")]),r("h2",[s._v("1、定义（学习模式不是目的，一定要了解其思想）")]),r("p",[s._v("亨元模式：要求将对象的属性划分为内部状态和外部状态（状态在这里通常指属性）。亨元模式的目标是尽量减少共享对象的数量。")]),r("h2",[s._v("2、内部状态与外部状态")]),r("h3",[s._v("2.1 如何划分内部状态和外部状态")]),r("ul",[r("li",[s._v("内部状态储存于对象的内部。")]),r("li",[s._v("内部状态可以被一些对象共享")]),r("li",[s._v("内部状态独立于具体的场景，通常不会改变")]),r("li",[s._v("外部状态取决于具体的场景，并根据场景而变化，外部状态不能被共享。")])]),r("p",[s._v("剥离了外部状态的对象成为共享对象， 外部状态在必要时被传入共享对象来组装成一个完整的对象。虽然组装外部状态成为一个完整对象的过程需要花费一定的时间，但却可以大大减少系统中的对象数量，相比之下，这点时间或许是微不足道的。因此，享元模式是一种用时间换空间的优化模式。")]),r("h2",[s._v("3、文件上传的例子")]),r("h3",[s._v("3.1 对象爆炸")]),r("p",[s._v("在微云上传模块的开发中，我曾经经历过对象爆炸的问题。微云的文件上传功能虽然可以选择依照队列，一个一个地排队上传，但也支持同时选择 2000 个文件。每一个文件都对应着一个\nJavaScript上传对象的创建，在第一版开发中，的确往程序里同时 new了 2000个 upload 对象，结果可想而知，Chrome中还勉强能够支撑，IE下直接进入假死状态。")]),r("p",[s._v("微云支持好几种上传方式，比如浏览器插件、Flash 和表单上传等，为了简化例子，我们先假设只有插件和 Flash 这两种。不论是插件上传，还是 Flash 上传，原理都是一样的，当用户选择了文件之后，插件和 Flash 都会通知调用 Window 下的一个全局 JavaScript 函数，它的名字是startUpload， 用户选择的文件列表被组合成一个数组 files 塞进该函数的参数列表里， 代码如下：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" id = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("window")]),s._v(".startUpload = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("uploadType, files")]),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", file; file = files[i++];) {\n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" uploadObj = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Upload(uploadType, file.fileName, file.fileSize);\n        uploadObj.init(id++);\n    }\n}\n")])]),r("p",[s._v("当用户选择完文件之后， startUpload 函数会遍历 files 数组来创建对应的 upload 对象。 接下来定义 Upload 构造函数，它接受 3个参数，分别是插件类型、文件名和文件大小。这些信息都已经被插件组装在 files 数组里返回，代码如下：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" Upload = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v(" uploadType, fileName, fileSize ")]),s._v(")")]),s._v("{ \n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".uploadType = uploadType; \n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".fileName = fileName; \n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".fileSize = fileSize; \n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".dom= "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(";                \n}; \n \nUpload.prototype.init = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v(" id ")]),s._v(")")]),s._v("{ \n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" that = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("; \n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".id = id; \n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".dom = "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".createElement( "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(" ); \n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".dom.innerHTML =  \n               "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'<span>文件名称:'")]),s._v("+ "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".fileName +"),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("', 文件大小: '")]),s._v("+ "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".fileSize +"),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'</span>'")]),s._v(" + \n               "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'<button class=\"delFile\">删除</button>'")]),s._v("; \n \n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".dom.querySelector( "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'.delFile'")]),s._v(" ).onclick = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{ \n        that.delFile(); \n    } \n    "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".body.appendChild( "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".dom ); \n};\n")])]),r("p",[s._v("同样为了简化示例，我们暂且去掉了 upload 对象的其他功能，只保留删除文件的功能，对应的方法是 Upload.prototype.delFile。该方法中有一个逻辑：当被删除的文件小于 3000 KB时，该文件将被直接删除。否则页面中会弹出一个提示框，提示用户是否确认要删除该文件，代码如下：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("Upload.prototype.delFile = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{ \n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ( "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".fileSize < "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3000")]),s._v(" ){ \n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".dom.parentNode.removeChild( "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".dom ); \n    } \n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ( "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("window")]),s._v(".confirm( "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'确定要删除该文件吗? '")]),s._v(" + "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".fileName ) ){ \n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".dom.parentNode.removeChild( "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".dom ); \n    } \n}; \n")])]),r("p",[s._v("接下来分别创建 3个插件上传对象和 3个 Flash上传对象：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("startUpload( "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'plugin'")]),s._v(", [ \n    { \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileName")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'1.txt'")]),s._v(", \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileSize")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1000")]),s._v(" \n    }, \n    { \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileName")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'2.html'")]),s._v(", \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileSize")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3000")]),s._v(" \n    }, \n    { \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileName")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'3.txt'")]),s._v(", \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileSize")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5000")]),s._v(" \n    } \n]); \n \nstartUpload( "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'flash'")]),s._v(", [ \n    { \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileName")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'4.txt'")]),s._v(", \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileSize")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1000")]),s._v(" \n    }, \n    { \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileName")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'5.html'")]),s._v(", \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileSize")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3000")]),s._v(" \n    }, \n    { \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileName")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'6.txt'")]),s._v(", \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileSize")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5000")]),s._v(" \n    } \n]); \n")])]),r("p",[s._v("当点击删除最后一个文件时，可以看到弹出了是否确认删除的提示。")]),r("h3",[s._v("3.2 亨元模式重构文件上传")]),r("p",[s._v("上一节的代码是第一版的文件上传，在这段代码里有多少个需要上传的文件，就一共创建了多少个 upload 对象，接下来我们用享元模式重构它。")]),r("h4",[s._v("3.2.1 剥离外部状态")]),r("p",[s._v("明确 uploadType 作为内部状态，因为 upload 对象初始化的工作被放在了 upload-Manager.add 函数里面，接下来只需要定义 Upload.prototype.del 函数即可：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("Upload.prototype.delFile = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v(" id ")]),s._v(")")]),s._v("{ \n    uploadManager.setExternalState( id, "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(" );  "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// (1) ")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ( "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".fileSize < "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3000")]),s._v(" ){ \n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".dom.parentNode.removeChild( "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".dom ); \n    }\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ( "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("window")]),s._v(".confirm( "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'确定要删除该文件吗? '")]),s._v(" + "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".fileName ) ){ \n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".dom.parentNode.removeChild( "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".dom ); \n    } \n};\n")])]),r("p",[s._v("在开始删除文件之前，需要读取文件的实际大小，而文件的实际大小被储存在外部管理器uploadManager 中， 所以在这里需要通过 uploadManager.setExternalState 方法给共享对象设置正确\n的 fileSize，上段代码中的(1)处表示把当前 id 对应的对象的外部状态都组装到共享对象中。")]),r("h4",[s._v("3.2.2 工厂进行对象实例化")]),r("p",[s._v("接下来定义一个工厂来创建 upload 对象，如果某种内部状态对应的共享对象已经被创建过，那么直接返回这个对象，否则创建一个新的对象：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" UploadFactory = ("),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{ \n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" createdFlyWeightObjs = {}; \n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" { \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("create")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v(" uploadType")]),s._v(")")]),s._v("{ \n            "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ( createdFlyWeightObjs [ uploadType] ){ \n                "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" createdFlyWeightObjs [ uploadType]; \n            } \n \n            "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" createdFlyWeightObjs [ uploadType] = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Upload( uploadType); \n        } \n    } \n})();\n")])]),r("h4",[s._v("3.2.3 管理器封装外部状态")]),r("p",[s._v("现在我们来完善前面提到的 uploadManager 对象，它负责向 UploadFactory 提交创建对象的请求，并用一个 uploadDatabase 对象保存所有 upload 对象的外部状态，以便在程序运行过程中给upload 共享对象设置外部状态，代码如下：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" uploadManager = ("),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{ \n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" uploadDatabase = {};\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" { \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("add")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v(" id, uploadType, fileName, fileSize ")]),s._v(")")]),s._v("{ \n            "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" flyWeightObj = UploadFactory.create( uploadType ); \n \n            "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" dom = "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".createElement( "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(" ); \n            dom.innerHTML =  \n                    "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'<span>文件名称:'")]),s._v("+ fileName +"),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("', 文件大小: '")]),s._v("+ fileSize +"),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'</span>'")]),s._v(" + \n                    "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'<button class=\"delFile\">删除</button>'")]),s._v("; \n \n            dom.querySelector( "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'.delFile'")]),s._v(" ).onclick = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{ \n                flyWeightObj.delFile( id ); \n            }\n            "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".body.appendChild( dom ); \n            uploadDatabase[ id ] = { \n                "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileName")]),s._v(": fileName, \n                "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileSize")]),s._v(": fileSize, \n                "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("dom")]),s._v(": dom         \n            }; \n            "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" flyWeightObj ; \n        }, \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("setExternalState")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v(" id, flyWeightObj ")]),s._v(")")]),s._v("{ \n            "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" uploadData = uploadDatabase[ id ]; \n            "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ( "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" uploadData ){ \n                flyWeightObj[ i ] = uploadData[ i ]; \n            } \n        } \n    } \n})();\n")])]),r("p",[s._v("然后是开始触发上传动作的 startUpload 函数")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" id = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; \n \n"),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("window")]),s._v(".startUpload = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v(" uploadType, files ")]),s._v(")")]),s._v("{ \n   "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ( "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", file; file = files[ i++ ]; ){ \n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" uploadObj = uploadManager.add( ++id, uploadType, file.fileName, file.fileSize ); \n   } \n}\n")])]),r("p",[s._v("最后是测试时间，运行下面的代码后，可以发现运行结果跟用享元模式重构之前一致")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("startUpload( "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'plugin'")]),s._v(", [ \n    { \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileName")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'1.txt'")]),s._v(", \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileSize")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1000")]),s._v(" \n    }, \n    { \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileName")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'2.html'")]),s._v(", \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileSize")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3000")]),s._v(" \n    }, \n    { \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileName")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'3.txt'")]),s._v(", \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileSize")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5000")]),s._v(" \n    } \n]); \n \nstartUpload( "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'flash'")]),s._v(", [ \n    { \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileName")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'4.txt'")]),s._v(", \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileSize")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1000")]),s._v(" \n    }, \n    { \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileName")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'5.html'")]),s._v(", \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileSize")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3000")]),s._v(" \n    }, \n    { \n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileName")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'6.txt'")]),s._v(",\n        "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("fileSize")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5000")]),s._v(" \n    } \n]);\n")])]),r("p",[s._v("享元模式重构之前的代码里一共创建了 6个 upload对象，而通过享元模式重构之后，对象的数量减少为 2，更幸运的是， 就算现在同时上传 2000个文件，需要创建的 upload对象数量依然是 2。")])])}],e=r("2877"),p={},n=Object(e["a"])(p,t,l,!1,null,null,null);a["default"]=n.exports}}]);
//# sourceMappingURL=chunk-2d0e51f0.9f39dcab.js.map